import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import tensorflow as tf
import tf2onnx
import json
import matplotlib.pyplot as plt
from sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix, ConfusionMatrixDisplay


url = "https://github.com/hse-aml/hadron-collider-machine-learning/releases/download/Week_2/training.csv.gz"
data = pd.read_csv(url, compression='gzip')

X = data.drop('Label', axis=1)
y = data['Label']
le = LabelEncoder()
y_enc = le.fit_transform(y)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


X_train_val, X_test, y_train_val, y_test = train_test_split(X_scaled, y_enc, test_size=0.15, stratify=y_enc, random_state=42)
X_train, X_valid, y_train, y_valid = train_test_split(X_train_val, y_train_val, test_size=0.1765, stratify=y_train_val, random_state=42)


model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(len(le.classes_), activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])


history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), epochs=50, batch_size=128)


plt.figure()
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='validation loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.savefig('train.png')


probas = model.predict(X_test)


auc_dict = {}
for idx, cls in enumerate(le.classes_):
    y_bin = (y_test == idx).astype(int)
    auc = roc_auc_score(y_bin, probas[:, idx])
    auc_dict[cls] = auc


plt.figure()
for idx, cls in enumerate(le.classes_):
    fpr, tpr, _ = roc_curve(y_test == idx, probas[:, idx])
    plt.plot(fpr, tpr, label=f'{cls} (AUC={auc_dict[cls]:.3f})')
plt.plot([0,1], [0,1], 'k--')
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.title('ROC Curves')
plt.legend()
plt.savefig('roc.png')


y_pred = np.argmax(probas, axis=1)
cm = confusion_matrix(y_test, y_pred, labels=range(len(le.classes_)))
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)
disp.plot()
plt.savefig('confusion.png')

spec = (tf.TensorSpec((None, X_train.shape[1]), tf.float32, name="input"),)
onnx_model, _ = tf2onnx.convert.from_keras(model, input_signature=spec)
with open('particles.onnx', 'wb') as f:
    f.write(onnx_model.SerializeToString())


metrics = {"test_auc": {cls: float(auc_dict[cls]) for cls in le.classes_}}
with open('particles.json', 'w') as f:
    json.dump(metrics, f, indent=2)
